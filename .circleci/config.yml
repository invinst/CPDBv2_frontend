version: 2
jobs:

  test:
    docker:
      - image: cpdbdev/cpdbv2_frontend:0.2.7
    environment:
      NODE_ENV: development
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-node-modules-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}
            - v3-node-modules-{{ checksum "package.json" }}-
            - v3-node-modules-
      - run: yarn
      - run: yarn lint
      - run: yarn cover
      - run:
          name: Submit coverage
          command: |
            if [ -z $SKIP_COVERALLS ] || [ $SKIP_COVERALLS != "true" ]; then
              yarn cover-report
            else
              echo "Skipped due to SKIP_COVERALLS is" $SKIP_COVERALLS
            fi
      # TODO: Enable integration-test back after fixing unstable integration-test
      # - run: yarn integration-test
      - store_artifacts:
          path: /home/circleci/errorShots
      - save_cache:
          key: v3-node-modules-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}
          paths:
            - "/home/circleci/project/node_modules"

  build:
    docker:
      - image: cpdbdev/cpdbv2_frontend:0.2.7
    environment:
      NODE_ENV: development
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-node-modules-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}
            - v3-node-modules-{{ checksum "package.json" }}-
            - v3-node-modules-
      - run: yarn
      - run:
          name: Build assets
          command: |
            if [ $CIRCLE_BRANCH == "master" ]
            then
              yarn build
            elif [ $CIRCLE_BRANCH == "beta" ]
            then
              yarn build-beta
            else
              yarn build-staging
            fi
      - persist_to_workspace:
          root: .
          paths:
            - dist

  test_nginx:
    machine: 
      image: ubuntu-2004:202201-02
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-node-modules-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}
            - v3-node-modules-{{ checksum "package.json" }}-
            - v3-node-modules-
      - attach_workspace:
          at: /tmp/workspace
      - run: cp -R /tmp/workspace/dist ./dist
      - run:
          name: Test nginx config
          command: |
            export MOBILE_SERVER_NAME=ms.cpdp.co
            sed -e "s/{{MOBILE_SERVER_NAME}}/$MOBILE_SERVER_NAME/" nginx.conf.template > nginx.conf
            docker build -t cpdbdev/desktop-frontend:latest .
            docker run --rm -d --name desktop-frontend cpdbdev/desktop-frontend:latest
            docker run --rm -v $(pwd):/app -w /app --link desktop-frontend -e "FRONTEND_DOMAIN=desktop-frontend" -e "MOBILE_SERVER_NAME=$MOBILE_SERVER_NAME" cpdbdev/cpdbv2_frontend:0.2.7 yarn test-nginx

  push_image:
    docker:
      - image: docker:18.06.1-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run: cp -R /tmp/workspace/dist ./dist
      - run: echo "build-$CIRCLE_BUILD_NUM" > buildnum
      - persist_to_workspace:
          root: .
          paths:
            - buildnum
      - run:
          name: Build and push image
          command: |
            if [ $CIRCLE_BRANCH == "master" ]
            then
              export MOBILE_SERVER_NAME=m.cpdp.co
            elif [ $CIRCLE_BRANCH == "beta" ]
            then
              export MOBILE_SERVER_NAME=mb.cpdp.co
            else
              export MOBILE_SERVER_NAME=ms.cpdp.co
            fi
            sed -e "s/{{MOBILE_SERVER_NAME}}/$MOBILE_SERVER_NAME/" nginx.conf.template > nginx.conf
            docker build -t cpdbdev/desktop-frontend:$(cat buildnum) .
            docker login -u cpdbdev -p $DOCKER_PASSWORD
            docker push cpdbdev/desktop-frontend:$(cat buildnum)

  deploy:
    docker:
      - image: google/cloud-sdk
    environment:
      PROJECT_NAME: "CPDB"
      GOOGLE_PROJECT_ID: "twitterbot-180604"
      GOOGLE_COMPUTE_ZONE: "us-central1-a"
      GOOGLE_CLUSTER_NAME: "cpdp-gke"
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Setup Google Cloud SDK
          command: |
            apt-get install -qq -y gettext
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - run:
          name: Apply deployment
          command: |
            if [ $CIRCLE_BRANCH == "master" ]
            then
              export NAMESPACE=production
            elif [ $CIRCLE_BRANCH == "beta" ]
            then
              export NAMESPACE=beta
            else
              export NAMESPACE=staging
            fi
            export IMAGE_TAG=$(cat /tmp/workspace/buildnum)
            cat desktop-frontend.yml | envsubst | kubectl apply -f - --namespace=$NAMESPACE


  reset_staging_branch:
    docker:
      - image: alpine/git:latest
    steps:
      - checkout
      - run: git checkout staging
      - run: git reset --hard origin/develop
      - run: git push --force origin staging

workflows:
  version: 2
  test_and_deploy:
    jobs:
      - test
      - build:
          requires:
            - test
      - test_nginx:
          requires:
            - build
      - push_image:
          requires:
            - test_nginx
          filters:
            branches:
              only:
                - staging
                - beta
                - master
      - deploy:
          requires:
            - push_image

